<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marks blog</title>
    <link>https://markyjones.github.io/blog/</link>
    <description>Recent content on Marks blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jul 2016 19:11:00 +0000</lastBuildDate>
    <atom:link href="https://markyjones.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Test</title>
      <link>https://markyjones.github.io/blog/post/test/</link>
      <pubDate>Sat, 09 Jul 2016 19:11:00 +0000</pubDate>
      
      <guid>https://markyjones.github.io/blog/post/test/</guid>
      <description>&lt;p&gt;TESTING&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Kong for development on Mac</title>
      <link>https://markyjones.github.io/blog/post/Installing%20Kong%20for%20development%20on%20Mac/</link>
      <pubDate>Sun, 26 Jun 2016 11:00:01 +0100</pubDate>
      
      <guid>https://markyjones.github.io/blog/post/Installing%20Kong%20for%20development%20on%20Mac/</guid>
      <description>&lt;p&gt;By far the easiest way I have found to get Mashape&amp;rsquo;s Kong installed for is &lt;a href=&#34;https://github.com/Mashape/docker-kong&#34;&gt;via Docker&lt;/a&gt;. This takes seconds and is about as pain free any install can get. How about installing to develop Kong though?&lt;/p&gt;

&lt;p&gt;I began following the excellent HelloWorld plugin guide &lt;a href=&#34;http://streamdata.io/blog/developing-an-helloworld-kong-plugin/&#34;&gt;here&lt;/a&gt; and I found that the environment setup steps in the article a little light and although I have seen Vagrent scripts &lt;a href=&#34;https://github.com/Mashape/kong-vagrant/blob/master/README.md&#34;&gt;here&lt;/a&gt; and other guides like &lt;a href=&#34;https://gist.github.com/nijikokun/189f84226f092dccd359&#34;&gt;this&lt;/a&gt; Mac OS installer script I believe the best route - as with most Mac installs - was directly via the Brew install approach &lt;a href=&#34;https://github.com/Mashape/homebrew-kong/blob/master/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Marco Palladino (aka thefosk and founder of Mashape) hosts a gist for Linux and Mac installation &lt;a href=&#34;https://gist.github.com/thefosk/75d2d718ceba66169d0e&#34;&gt;here&lt;/a&gt; but if you look at the script it essentially just uses Brew if OSX is detected there is also a detailed debugging on Kong guide &lt;a href=&#34;http://lua-programming.blogspot.co.uk/2015/12/how-to-debug-kong-plugins-on-windows.html?m=1&#34;&gt;here&lt;/a&gt; which covers using this &lt;a href=&#34;https://github.com/thibaultCha/homebrew-kong/blob/master/README.md&#34;&gt;Brew&lt;/a&gt; when using OSX although using the &lt;code&gt;$ brew install kong --with-cassandra&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;So I found that (presuming you have openssl installed via Brew)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew update
$ brew tap mashape/kong
$ brew install kong
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blows up with&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Error: Failed installing dependency: &lt;a href=&#34;https://luarocks.org/luacrypto-0.3.2-1.src.rock&#34;&gt;https://luarocks.org/luacrypto-0.3.2-1.src.rock&lt;/a&gt; - Could not find header file for OPENSSL
No file openssl/evp.h in /usr/local/include
No file openssl/evp.h in /usr/include
You may have to install OPENSSL in your system and/or pass OPENSSL_DIR or OPENSSL_INCDIR to the luarocks command.
Example: luarocks install luacrypto OPENSSL_DIR=/usr/local&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;the &lt;code&gt;make install&lt;/code&gt; build step failed due to an OpenSSL error&amp;hellip; Some Googling later I came up with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew link --force openssl
$ brew install kong
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only to notice it was &lt;strong&gt;already&lt;/strong&gt; a known troubleshooting step(!) on the official brew &lt;a href=&#34;https://github.com/Mashape/homebrew-kong&#34;&gt;readme&lt;/a&gt; (note to self read the full install steps first!)&lt;/p&gt;

&lt;p&gt;In order to start Kong I found that it was missing a Kong.yml locally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kong start
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;[ERR] No configuration file at: /etc/kong/kong.yml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The script &lt;a href=&#34;http://m.blog.csdn.net/article/details?id=49895497&#34;&gt;here&lt;/a&gt; does solves this task e.g. Via symbolic link&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/kong
$ sudo ln -s /usr/local/lib/luarocks/rocks/kong/0.8.3-0/conf/kong.yml /etc/kong/kong.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just clone it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /etc/kong
$ sudo cp /usr/local/lib/luarocks/rocks/kong/0.8.3-0/conf/kong.yml /etc/kong/kong.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start it again&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kong start
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;[ERR] All hosts tried for query failed. 127.0.0.1:9042: connection refused for socket with peer 127.0.0.1:9042.
[ERR] Could not start Kong&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you don&amp;rsquo;t have Cassandra running locally or remotely e.g. via docker then get it running and configure your kong.yml appropriately (I personally used docker).&lt;/p&gt;

&lt;p&gt;Now Kong should start&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kong start
$ curl http://localhost:8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having managed to now build and install Kong I was able to follow through the Kong &lt;a href=&#34;http://streamdata.io/blog/developing-an-helloworld-kong-plugin/&#34;&gt;HelloWorld&lt;/a&gt; plugin tutorial up to the point of testing. Running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/Mashape/kong.git
$ make test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gave me an error about &lt;code&gt;@busted&lt;/code&gt; being missing&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;make: busted: No such file or directory
make: *** [test] Error 1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;a quick Google gave me a boy band…(Hmmm) after a head slap moment I realised it was a Lua module for unit testing &lt;a href=&#34;http://olivinelabs.com/busted/&#34;&gt;here&lt;/a&gt; and I simply needed to install it like so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ luarocks install busted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next small hurdle is that the tests require a Kong_TEST.yml file in the root folder - simply cloning the existing Kong.yml file sufficed (assuming you are in the root of the source code)&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp ./kong.yml ./kong_TEST.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
173 successes / 0 failures / 0 errors / 0 pending : 0.908241 seconds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now I was up and running with compile, install and testing and could get on with the HelloWorld blog article and also look at the debuging in the other &lt;a href=&#34;http://lua-programming.blogspot.co.uk/2015/12/how-to-debug-kong-plugins-on-windows.html?m=1&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fault tolerance</title>
      <link>https://markyjones.github.io/blog/post/The%20Circuit%20Breaker/</link>
      <pubDate>Wed, 07 May 2014 11:00:01 +0100</pubDate>
      
      <guid>https://markyjones.github.io/blog/post/The%20Circuit%20Breaker/</guid>
      <description>

&lt;p&gt;One of my favourite talks from Qcon this year was Fault tolerance made easy by Uwe Friedrichsen. Uwe&amp;rsquo;s talk about fault tolerance had a big impact on me (a similar presentation can be seen &lt;a href=&#34;https://youtu.be/lc_APy75e6o&#34;&gt;here&lt;/a&gt; and I implore you to watch it).&lt;/p&gt;

&lt;p&gt;Uwe&amp;rsquo;s presentation was largely based around the book Release It! which I have since picked up to read myself. I am only half way through and already I would state this is in my top 3 professional books.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.co.uk/gp/product/0978739213/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0978739213&amp;amp;linkCode=as2&amp;amp;tag=marblo03-21&#34;&gt;&lt;img src=&#34;http://ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0978739213&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=marblo03-21&#34; alt=&#34;Purchace Release It!&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The key thing from both the talk and the book is that systems will fail and that they will perform very differently in production compared to how they performed in a functional or a load test environment. The emphasis is therefore on how build our systems to react to that failure in sensible ways. There are patterns and anti-patterns described in the books. The 2 taster examples below are simple ones to give you a quick flavour&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;the-circuit-breaker:d693bdafb5e618dde7740d1734d99f57&#34;&gt;The Circuit Breaker&lt;/h2&gt;

&lt;p&gt;Take a moderatly high throughput environment ~500,000 requests per minute (around ~8,000 requests per second) to the database&amp;hellip;&lt;/p&gt;

&lt;p&gt;Your database is down. How does your application react? Well it desperately and repeatedly attempts to bludgeon the database into giving it a connection, meanwhile almost every thread on the web server is blocked waiting on failed connection responses from the DB server, by which time you probably don&amp;rsquo;t even have the resources left even to serve an error page.&lt;/p&gt;

&lt;p&gt;What if the first bit of code to have received a SQL connection exception decided to &amp;ldquo;warn&amp;rdquo; the rest of the code base that the database was erroring? Assuming we get more than n number of exceptions within a period of time why not collectively agree to &amp;ldquo;break the circuit&amp;rdquo;, then agree to retry again after a period of time?&lt;/p&gt;

&lt;p&gt;This gives the system trying to recover a respite, it gives the application server instant feedback to inform the user (rather than waiting for time outs) and it stops the application server chewing up resources that could be spent serving other applications that could be working.&lt;/p&gt;

&lt;p&gt;The database here is just an example this could be anything external to the calling code and I think this pattern should be widely implemented.  &lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;const int numberOfFailedAttempts = 2;

var policy = Policy
  .Handle&amp;lt;SqlException&amp;gt;(ex =&amp;gt; ex.Number == ????)
  .CircuitBreaker(numberOfFailedAttempts,
TimeSpan.FromMinutes(1));

policy.Execute(() =&amp;gt; CallDatabase());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;/p&gt;

&lt;h2 id=&#34;limited-retries:d693bdafb5e618dde7740d1734d99f57&#34;&gt;Limited Retries&lt;/h2&gt;

&lt;p&gt;Handling transient failures. Take our code calling an external system like a partners API. We fail the first time but want to try again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var policy = Policy
              .Handle&amp;lt;DivideByZeroException&amp;gt;()
              .WaitAndRetry(new[]
              {
                TimeSpan.FromSeconds(1),
                TimeSpan.FromSeconds(2),
                TimeSpan.FromSeconds(3)
              });

policy.Execute(() =&amp;gt; DoSomething());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;others:d693bdafb5e618dde7740d1734d99f57&#34;&gt;Others&lt;/h2&gt;

&lt;p&gt;I also see value in other patterns like &lt;em&gt;Shed Load&lt;/em&gt;, Netflix gets clever with this and has ideas of capacity and deliberately sends errors back to users when capacity is breached. The &lt;em&gt;Fall Back&lt;/em&gt; is where a failure on a response would mean invoking another function like retrieving a value from a cache - the theory being stale data is better than no data when a service is down.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/ab21cec6ca97aae3479beed850b448d67d311f1e/68747470733a2f2f7261772e6769746875622e636f6d2f4170702d764e6578742f506f6c6c792f6d61737465722f506f6c6c792e706e67&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What tools are there for this? Well the examples I have used above are in a tool called &lt;a href=&#34;https://github.com/michael-wolfenden/Polly&#34;&gt;Polly&lt;/a&gt; and the daddy of libraries is &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34;&gt;Hystrix&lt;/a&gt; a Netflix product whose stated goal is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is an immature port to .NET of Hystrix &lt;a href=&#34;https://hystrixnet.codeplex.com/&#34;&gt;here&lt;/a&gt; and I would love for this to develop further but it doesn&amp;rsquo;t look overly promising at the moment the project appears to be dead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/e871b5d002a9699e7a2d9fa0178af5c72f0743e0/68747470733a2f2f6e6574666c69782e6769746875622e636f6d2f487973747269782f696d616765732f687973747269782d6c6f676f2d7461676c696e652d3835302e706e67&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Polly covers a lot of the simpler patterns, it is light weight and is a great tool.&lt;/p&gt;

&lt;p&gt;I would love for everyone to consider the book &amp;ldquo;Release It&amp;rdquo; as one for their reading list; however, failing that take a minute to study the &lt;a href=&#34;http://qconlondon.com/dl/qcon-london-2014/slides/UweFriedrichsen_FaultToleranceMadeEasyAHeadStartToResilientSoftwareDesign.pdf&#34;&gt;slides&lt;/a&gt; and check out the documentation for &lt;a href=&#34;https://github.com/Netflix/Hystrix/wiki&#34;&gt;Hystrix&lt;/a&gt; this stuff really does matter any highly available system.&lt;/p&gt;

&lt;p&gt;If nothing else, next time you write a feature ask yourself &amp;ldquo;what happens when this dependency fails&amp;rdquo;? because in complex systems failure is inevitable and we need to avoid cascading failures and wasting server resources when it happens.  &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Skype attacks IIS</title>
      <link>https://markyjones.github.io/blog/post/Skype%20attacks%20IIS/</link>
      <pubDate>Fri, 01 Jun 2012 11:00:01 +0100</pubDate>
      
      <guid>https://markyjones.github.io/blog/post/Skype%20attacks%20IIS/</guid>
      <description>&lt;p&gt;We are currently developing an IIS hosted .NET application at work. Eventually the whole app will be hosted through HTTPS so for now we are doing a lot of the development this way too, thus our local development servers are configured for HTTPS over port 443.&lt;/p&gt;

&lt;p&gt;One of the devs on the project was setting up their machine yesterday and kept getting the following error in IIS when starting their website: &amp;ldquo;The process cannot access the file because it is being used by another process. (Exception from HRESULT: 0x80070020)&amp;ldquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://markyjones.github.io/blog/img/skype attacks IIS/error.png&#34; alt=&#34;Untitled&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We had to find which process was doing the blocking:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;c:\&amp;gt; netstat -ao
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gives us a list of all active connections. Look in the local address column for something on port 443 e.g. &amp;ldquo;0.0.0.0:443&amp;rdquo; grab the PID from the rightmost column in my case 2384.&lt;/p&gt;

&lt;p&gt;Gives us a list of all active connections. Look in the local address column for something on port 443 e.g. &amp;ldquo;0.0.0.0:443&amp;rdquo; grab the PID from the rightmost column in my case 2384.
Now grab the name of the culprit:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;c:\&amp;gt; tasklist /fi &amp;quot;PID eq 2384&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Image Name                     PID Session Name        Session#    Mem Usage
========================= ======== ================ =========== ============
Skype.exe                     2384 Console                    1    104,180 K
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So go KILL that process and now IIS should be happy again.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>